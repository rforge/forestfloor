{
    "contents" : "\\name{show3d}\n\\alias{show3d}\n%- Also NEED an '\\alias' for EACH other topic documented here.\n\\title{\nmake 3d-plot of forestFloor topology\n}\n\\description{\nEach axis is provided one variable or feature contribution, a z-axis surface response layer will be estimated and plotted alongside the datapoints. Latests 2D colour gradient is fetched from object global.col in .GlobalEnv. show3d() uses openGL rendering through the rgl-package. Image will emerge in external graphical device and can controlled by mouse pointer.\n\n}\n\\usage{\nshow3d(RFCV_object, order_by_importance = F, which_matrices = c(\"X\", \"X\", \"FCsCV\"), x_cols = 2, y_cols = 11, z_cols = c(2), plot.surface = T, grid.lines = 30, k = 5, alpha = 0.4, z_scale = 0.7, knnBag = 20, bag.ratio = 0.5)\n}\n%- maybe also 'usage' for other objects documented here.\n\\arguments{\n  \\item{forestFloor_object}{\n  Computed topology of randomForest-model, the output from the forestFloor function of class forestFloor\n%%     ~~Describe \\code{RFCV_object} here~~\n  }\n  \\item{order_by_importance}{\n   = FALSE: indices refer to variable order in original training data. (good for scripting) \\cr\n   = TRUE:  indices refer to importanced ordered. (good for user interaction)\n  }\n  \\item{which_matrices}{\n  a char vector of length 3, with names of object data should be fetched. As default is \n  c(\"X\", \"X\", \"FCsCV\"); indices of X_cols and y_cols will be fetched from training set matrix and z_cols from feature contribution matrix. Any matrix in forstFloor.object can theoretically accessesible for plotting. This setting is rarely changed.\n  \n  }\n  \\item{x_cols}{\nvector of one or multiple col indices for x_axis. By default col indices refers training variable matrix ordered by importance.\n\n  }\n  \\item{y_cols}{\nvector of one or multiple col indices for x_axis. By default col indices refers training variable matrix ordered by importance.\n\n  }\n  \\item{z_cols}{\nvector of one or multiple col indices for z_axis. By default col indices refers training feature contribution matrix ordered by importance.\n  }\n  \\item{plot.surface}{\nTRUE/FALSE\n  }\n  \\item{grid.lines}{\ninteger 2 to many. How many grid.lines in surface response. 30 grid.lines = 900 anchorpoints\n  }\n  \\item{k}{\ninterger from 1 to many. k amount of nearest neighbors to average response of anchor point. Higher values will smooth surface.\n  }\n  \\item{alpha}{\ntransparency of surface, lower values more transparent\n  }\n  \\item{z_scale}{\nnumeric, near zero to larger number. Steapness of surface. Between 0.1 and 10 are reasonable settings. Paremeter is passed directly to rgl-functions.\n  }\n  \\item{knnBag}{\ninteger, 1 to many. How many times should kNN be bootstrapped and estimated for each anchorpoint. High values increase reproducibility of surface rarely more than 20 is needed.\n  }\n  \\item{bag.ratio}{\nnumeric number between near zero and one. The ratio of used observations over all observations used in each bootstrapped surface estimation. Values less than one, will increase amount above k nearest neighbors used in estimation of each anchorpoint. Nearest neighbors will participate in most estimations and have a high weighting, more distant neighbors will participate gradually more rarely and yield a lower weighting. bag.ratio is therefore a non-metric pseudo gaussian weighting paremeter.\n  }\n}\n\\details{\nwas very simple to implement, in long run would true gaussian weighting paremeter maybe be advantageous. Computing times of bagge nearest neighbor is theoretically poor but practically instancetaously.\n}\n\n\\value{\nno value\n%%  ~Describe the value returned\n%%  If it is a LIST, use\n%%  \\item{comp1 }{Description of 'comp1'}\n%%  \\item{comp2 }{Description of 'comp2'}\n%% ...\n}\n\\references{\n%% ~put references to the literature/web site here ~\n}\n\\author{\nSÃ¸ren Havelund Welling\n}\n\\note{\n%%  ~~further notes~~\n}\n\n%% ~Make other sections like Warning with \\section{Warning }{....} ~\n\n\\seealso{\n%% ~~objects to See Also as \\code{\\link{help}}, ~~~\n}\n\\examples{\n#simulate data\nobs=1000 \\cr\nvars = 6 \\cr\nX = data.frame(replicate(vars,rnorm(obs)))\\cr \nY = with(X, X1^2 + sin(X2*pi) + 2 * X3 * X4 + 0.5 * rnorm(obs))\\cr \n\n#grow a forest, remeber to include inbag\nrfo=randomForest(X,Y,keep.inbag=TRUE)\\cr\n\n#compute topology\nff = forestFloor2(rfo,X)\\cr\n\n#print forestFloor\nprint(ff) \\cr\n\n#plot partial functions of most important variables first\nplot(ff,plot_seq=NULL,colour_by=\"dummy, no defined color-template\",col_axis=1) \\cr\n\n#Non interacting functions are well displayed, whereas X3 and X4 are not\n#by applying different colourgradient, interactions reveal themself \nplot(ff,plot_seq=NULL,colour_by=3,col_axis=1) \\cr\n\n#in 3D the interaction between X3 and X reveals itself completely\nshow3d(ff,x_cols=3,y_cols=4,z_cols=3:4) \\cr\n\n#although no interaction, a joined additive effect of X1 and X2\n#can also be informative to display in 3D\nplot(ff,plot_seq=NULL,colour_by=4,col_axis=2) #use plot first to define colours \\cr\nshow3d(ff,x_cols=1,y_cols=2,z_cols=1:2) \\cr\n\n}\n% Add one or more standard keywords, see file 'KEYWORDS' in the\n% R documentation directory.\n\\keyword{ ~kwd1 }\n\\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line\n",
    "created" : 1420286766653.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3498199239",
    "id" : "B35968D5",
    "lastKnownWriteTime" : 1417756070,
    "path" : "~/Documents/PHD/Rlocal/forestFloor/man/show3d.Rd",
    "project_path" : "man/show3d.Rd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_doc"
}