imp.weight = TRUE
imp.exp = 1
if(class(ff)=="forestFloor") {
if(X.matrix) colM = ff$X else colM = ff$FCmatrix
} else {
colM=ff
}
if(!class(colM) %in% c("data.frame","matrix")) {
stop(paste(class(colM),"is neither matrix or data.frame"))
}
colM = data.frame(colM)
#checking selected cols
if(is.null(cols)) cols = 1:dim(colM)[2] #select all columns
cols=1:4
if(is.null(cols)) cols = 1:dim(colM)[2] #select all columns
if(length(cols)<1 || !is.numeric(cols) || any(!cols %in% 1:dim(colM)[2])) {
stop("no cols selected or is not integer/numeric or wrong coloumns")
}
length(cols)
length(cols)<1
!is.numeric(cols)
cols
sel.colM = colM[,cols]    #use only selected columns
sel.cols = 1:length(cols) #update cols to match new col.indices of colM
sel.colM = box.outliers(sel.colM,limit=outlier.lim)
outlier.lim = 3
sel.colM = box.outliers(sel.colM,limit=outlier.lim)
imp.weight
imp.weight && length(cols)>1
length(cols)>1
class(ff)=="forestFloor"
imp.weight && length(cols)>1
sel.imp = ff$importance[cols]
non.negative.imp = sel.imp+min(sel.imp)
sumnorm.imp =  non.negative.imp / sum(non.negative.imp)
exp.imp = sumnorm.imp ^ imp.exp #included weight exponent
impM = t(replicate(dim(colM)[1],exp.imp))
sel.colM = sel.colM*impM #inflate by importance
sel.colM = sel.colM / max(sel.colM)
} else {warning("importance weighting only possible for class 'forestFloor'")}
col.df = min(length(cols),3)
col.df
#sf9: colour function
fcol = function(ff,
cols = NULL,
outlier.lim = 3,
brightness = 0.75,
saturation = 0.75,
hue = 0.25,
alpha = NULL,
.hue.range  = NULL,
.sat.range  = NULL,
.bri.range  = NULL,
max.df=3,
X.matrix = TRUE,
imp.weight = TRUE,
imp.exp = 1) {
##ssf8.1: is between function
ib <- function(x, low, high) (x -low) * (high-x) > 0
##ssf8.2: move center range of vector at mid with new width of span
span <- function(x, mid, width) ((x-min(x))/(max(x)-min(x))-0.5)*width+mid
##ssf8.3: compute widest range possible with given brightness or saturation
auto.range = function(level,low=0,high=1) abs(min(level-low,high-level))*2
##ssf8.4: contain a vector such that any out side limits will be reduced to limits
contain = function(x,low=0,high=1) {
x[x>high]=high
x[x<low ]=low
x
}
#get/check data.frame/matrix, convert to df, remove outliers and normalize
if(class(ff)=="forestFloor") {
if(X.matrix) colM = ff$X else colM = ff$FCmatrix
} else {
colM=ff
}
if(!class(colM) %in% c("data.frame","matrix")) {
stop(paste(class(colM),"is neither matrix or data.frame"))
}
colM = data.frame(colM)
#checking selected cols
if(is.null(cols)) cols = 1:dim(colM)[2] #select all columns
if(length(cols)<1 || !is.numeric(cols) || any(!cols %in% 1:dim(colM)[2])) {
stop("no cols selected or is not integer/numeric or wrong coloumns")
}
sel.colM = colM[,cols]    #use only selected columns
sel.cols = 1:length(cols) #update cols to match new col.indices of colM
#restrain outliers by limit(std.dev) and normalize
sel.colM = box.outliers(sel.colM,limit=outlier.lim)
#inflating data by importance
if(imp.weight && length(cols)>1) {
if(class(ff)=="forestFloor") {
sel.imp = ff$importance[cols]
non.negative.imp = sel.imp+min(sel.imp)
sumnorm.imp =  non.negative.imp / sum(non.negative.imp)
exp.imp = sumnorm.imp ^ imp.exp #included weight exponent
impM = t(replicate(dim(colM)[1],exp.imp))
sel.colM = sel.colM*impM #inflate by importance
sel.colM = sel.colM / max(sel.colM)
} else {warning("importance weighting only possible for class 'forestFloor'")}
}
#if maxPC is less than n selected coloumns
#centering, no scaling and PCA is applied
#output scores is transformed to range [0,1]
#cols are correct to lower manifold number maxPC
col.df = length(cols)
if(col.df>max.df) {
len.colM = box.outliers(prcomp(sel.colM)$x[,1:max.df],limit=Inf)
col.df = max.df
} else {
len.colM = box.outliers(sel.colM,limit=Inf)
}
#Setting up ranges for colours
if(any(!c(class(hue),class(saturation),class(brightness)) %in% c("numeric","integer"))){
stop("hue, saturation and brightness must be of class numeric or integer")
}
#correct input to be within [0,1]
hue = hue - floor(hue)
saturation = max(min(saturation,1),0)
brightness = max(min(saturation,1),0)
#define ranges if not defined
if(is.null(.hue.range)) {
if(col.df==1) .hue.range = .85
if(col.df==2) .hue.range = 1 #circular no range lim needed
if(col.df==3) .hue.range = 1 #circular no range lim needed
}
if(is.null(.sat.range)) {
if(col.df==1) .sat.range = "not used"
if(col.df==2) .sat.range = auto.range(saturation)
if(col.df==3) .sat.range = auto.range(saturation)
}
if(is.null(.bri.range)) {
if(col.df==1) .bri.range = "not used"
if(col.df==2) .bri.range = "not used"
if(col.df==3) .bri.range = auto.range(brightness)
}
if(is.null(alpha)) alpha = min(1,400/dim(len.colM)[1])
##writing colour scale dependent on colour degrees of freedom(col.df)
#one way gradient
if(col.df==1) {
hue.vec = as.numeric(len.colM) * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - 1
colours = hsv(h = hue.vec,
s = saturation,
v = brightness,
alpha = alpha) #defining colour gradient along X3)
}
#two way gradient
if(col.df==2) {
hsvcol = t(rgb2hsv(len.colM[,1],len.colM[,2],1-apply(len.colM,1,mean)))
hue.vec = hsvcol[,1] * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - 1
hsvcol[,1] = hue.vec
#saturation is proportional with distance to center
hsvcol[,2] = ((len.colM[,1]-mean(len.colM[,1]))^2
+(len.colM[,2]-mean(len.colM[,2]))^2)^.sat.range * saturation
hsvcol[,2] = hsvcol[,2] / max(hsvcol[,2])
hsvcol[,3] = brightness
colours = hsv(hsvcol[,1],hsvcol[,2],hsvcol[,3],alpha=alpha)
}
#three way gradient
if(col.df==3) {
hsvcol      = t(rgb2hsv(len.colM[,1],len.colM[,2],len.colM[,3]))
#set hue
hue.vec     = hsvcol[,1] * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - 1
hsvcol[,1]  = hue.vec
#set sat
span.sat    = span(hsvcol[,2],saturation,.sat.range)
hsvcol[,2]  = contain(span.sat)
#set bri
mean.bri    = apply(len.colM,1,mean)
span.bri    = span(mean.bri,brightness,.bri.range)
hsvcol[,3]  = contain(span.bri)
colours     = hsv(hsvcol[,1],hsvcol[,2],hsvcol[,3],alpha=alpha)
}
print(.sat.range)
return(colours)
}
colours = fcol(ff,1:5,sat=0.9,bri=0.9,alpha=0.30,hue=.6)
plot(ff$X[,1:5],col=colours)
# plot3d(ff$X[,1:3],col=colours)
colours = fcol(ff$X,1:5,sat=0.9,bri=0.9,alpha=0.30,hue=.6)
plot(ff$X[,1:5],col=colours)
colours = fcol(ff$X,1:4,sat=0.9,bri=0.9,alpha=0.30,hue=.6)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:3,sat=0.9,bri=0.9,alpha=0.30,hue=.6)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=.6)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],sum),col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=.0,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=.1,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=.1,.hue.range=0.3,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.5,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=-.1,.hue.range=0.5,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.7,.hue.range=0.5,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.9,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.2,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.6,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.5,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.75,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.7,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.65,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.5,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.6,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.45,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.55,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:3,sat=0.9,bri=0.9,alpha=0.30,hue=0.55,.hue.range=0.6,max.df=3)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:3],1,sum),col=colours)
colours = fcol(ff$X,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0.55,.hue.range=0.6,max.df=1)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$FCmatrix,1,sat=0.9,bri=0.9,alpha=0.30,hue=0.55,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$FCmatrix,1,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.6,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$FCmatrix,1,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.66,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
colours = fcol(ff$FCmatrix,1,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.86,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=0.7)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=5)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,1,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.86,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$FCmatrix,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.86,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$FCmatrix,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.86,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(spply(ff$FCmatrix,1,sum)),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(apply(ff$FCmatrix,1,sum)),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(apply(ff$FCmatrix,1,sum),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
apply(ff$FCmatrix,1,sum)
colours = fcol(apply(ff$FCmatrix,1,sum),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(apply(ff$FCmatrix[,1:2],1,sum),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(apply(ff$FCmatrix[,1:2],1,c),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(matrix(apply(ff$FCmatrix[,1:2],1,sum)),1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=1)
colours = fcol(ff,1:2,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=3)
colours = fcol(ff,1:3,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=3)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,1:3,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,4:3,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.75,max.df=2)
plot(ff$X[,1:4],col=colours)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,4:3,sat=0.95,bri=0.4,alpha=0.50,hue=0,.hue.range=0.75,max.df=2)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,4:3,sat=0.95,bri=0.4,alpha=0.50,hue=0,max.df=2)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,4:3,sat=0.95,bri=0.4,alpha=0.90,hue=0,max.df=2)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,2:4,sat=0.95,bri=0.4,alpha=0.90,hue=0,max.df=2)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,1:4,sat=0.95,bri=0.4,alpha=0.90,hue=0,max.df=2)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,1:4,sat=0.75,bri=0.75,alpha=0.90,hue=0,max.df=3)
plot3d(x=ff$X[,4],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
plot3d(x=ff$X[,2],y=ff$X[,3],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff,2:4,sat=0.9,bri=0.9,alpha=0.30,hue=0,.hue.range=0.2,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.9,alpha=0.30,hue=0.3,.hue.range=0.2,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.9,alpha=0.30,hue=0.4,.hue.range=0.2,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=0.2,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=0.33,max.df=2)
colours = fcol(ff,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=0.33,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=0.66,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=1,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.8,.hue.range=1,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=1,.hue.range=1,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.1,.hue.range=1,max.df=2)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,2:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.1,.hue.range=1,max.df=3)
plot(ff$X[,1:4],col=colours)
colours = fcol(ff$X,1:4,sat=0.9,bri=0.6,alpha=0.30,hue=0.1,.hue.range=1,max.df=3)
plot(ff$X[,1:4],col=colours)
library(MASS)
mvrnorm
plot(ff$X[,1:5],col=colours)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,4:3],1,sum),col=colours,size=5,alpha=0.4)
plot3d(x=ff$X[,1],y=ff$X[,2],z=apply(ff$FCmatrix[,1:2],1,sum),col=colours,size=5,alpha=0.4)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,1:,sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
colours = fcol(ff$X,1:,sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
colours = fcol(ff$X[,1],sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
colours = fcol(ff$X[,1],sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
colours = fcol(ff$X[,1],1,sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
colours = fcol(ff$X,1,sat=1,bri=0.7,alpha=0.50,hue=0,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
colours = fcol(ff$X,1,sat=1,bri=0.7,alpha=0.50,hue=.3,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
colours = fcol(ff$X,1,sat=1,bri=0.7,alpha=0.50,hue=.55,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
plot(ff$X[,1:2],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.55,.hue.range=.6,max.df=1)
plot(ff$X[,1:2],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.55,.hue.range=.9,max.df=1)
plot(ff$X[,1:2],col=colours)
plot(ff$X[,3:4],col=colours)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=.9,max.df=1)
plot(ff$X[,3:4],col=colours)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=.85,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=.85,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=2,max.df=1)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=1,max.df=1)
plot(ff$X[,3:4],col=colours)
#sf9: colour function
fcol = function(ff,
cols = NULL,
outlier.lim = 3,
brightness = 0.75,
saturation = 0.75,
hue = 0.25,
alpha = NULL,
.hue.range  = NULL,
.sat.range  = NULL,
.bri.range  = NULL,
max.df=3,
X.matrix = TRUE,
imp.weight = TRUE,
imp.exp = 1) {
##ssf8.1: is between function
ib <- function(x, low, high) (x -low) * (high-x) > 0
##ssf8.2: move center range of vector at mid with new width of span
span <- function(x, mid, width) ((x-min(x))/(max(x)-min(x))-0.5)*width+mid
##ssf8.3: compute widest range possible with given brightness or saturation
auto.range = function(level,low=0,high=1) abs(min(level-low,high-level))*2
##ssf8.4: contain a vector such that any out side limits will be reduced to limits
contain = function(x,low=0,high=1) {
x[x>high]=high
x[x<low ]=low
x
}
#get/check data.frame/matrix, convert to df, remove outliers and normalize
if(class(ff)=="forestFloor") {
if(X.matrix) colM = ff$X else colM = ff$FCmatrix
} else {
colM=ff
}
if(!class(colM) %in% c("data.frame","matrix")) {
stop(paste(class(colM),"is neither matrix or data.frame"))
}
colM = data.frame(colM)
#checking selected cols
if(is.null(cols)) cols = 1:dim(colM)[2] #select all columns
if(length(cols)<1 || !is.numeric(cols) || any(!cols %in% 1:dim(colM)[2])) {
stop("no cols selected or is not integer/numeric or wrong coloumns")
}
sel.colM = colM[,cols]    #use only selected columns
sel.cols = 1:length(cols) #update cols to match new col.indices of colM
#restrain outliers by limit(std.dev) and normalize
sel.colM = box.outliers(sel.colM,limit=outlier.lim)
#inflating data by importance
if(imp.weight && length(cols)>1) {
if(class(ff)=="forestFloor") {
sel.imp = ff$importance[cols]
non.negative.imp = sel.imp+min(sel.imp)
sumnorm.imp =  non.negative.imp / sum(non.negative.imp)
exp.imp = sumnorm.imp ^ imp.exp #included weight exponent
impM = t(replicate(dim(colM)[1],exp.imp))
sel.colM = sel.colM*impM #inflate by importance
sel.colM = sel.colM / max(sel.colM)
} else {warning("importance weighting only possible for class 'forestFloor'")}
}
#if maxPC is less than n selected coloumns
#centering, no scaling and PCA is applied
#output scores is transformed to range [0,1]
#cols are correct to lower manifold number maxPC
col.df = length(cols)
if(col.df>max.df) {
len.colM = box.outliers(prcomp(sel.colM)$x[,1:max.df],limit=Inf)
col.df = max.df
} else {
len.colM = box.outliers(sel.colM,limit=Inf)
}
#Setting up ranges for colours
if(any(!c(class(hue),class(saturation),class(brightness)) %in% c("numeric","integer"))){
stop("hue, saturation and brightness must be of class numeric or integer")
}
#correct input to be within [0,1]
hue = hue - floor(hue)
saturation = max(min(saturation,1),0)
brightness = max(min(saturation,1),0)
#define ranges if not defined
if(is.null(.hue.range)) {
if(col.df==1) .hue.range = .85
if(col.df==2) .hue.range = 1 #circular no range lim needed
if(col.df==3) .hue.range = 1 #circular no range lim needed
}
if(is.null(.sat.range)) {
if(col.df==1) .sat.range = "not used"
if(col.df==2) .sat.range = auto.range(saturation)
if(col.df==3) .sat.range = auto.range(saturation)
}
if(is.null(.bri.range)) {
if(col.df==1) .bri.range = "not used"
if(col.df==2) .bri.range = "not used"
if(col.df==3) .bri.range = auto.range(brightness)
}
if(is.null(alpha)) alpha = min(1,400/dim(len.colM)[1])
##writing colour scale dependent on colour degrees of freedom(col.df)
#one way gradient
if(col.df==1) {
hue.vec = as.numeric(len.colM) * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - floor(hue.vec[hue.vec>1])
colours = hsv(h = hue.vec,
s = saturation,
v = brightness,
alpha = alpha) #defining colour gradient along X3)
}
#two way gradient
if(col.df==2) {
hsvcol = t(rgb2hsv(len.colM[,1],len.colM[,2],1-apply(len.colM,1,mean)))
hue.vec = hsvcol[,1] * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - 1
hsvcol[,1] = hue.vec
#saturation is proportional with distance to center
hsvcol[,2] = ((len.colM[,1]-mean(len.colM[,1]))^2
+(len.colM[,2]-mean(len.colM[,2]))^2)^.sat.range * saturation
hsvcol[,2] = hsvcol[,2] / max(hsvcol[,2])
hsvcol[,3] = brightness
colours = hsv(hsvcol[,1],hsvcol[,2],hsvcol[,3],alpha=alpha)
}
#three way gradient
if(col.df==3) {
hsvcol      = t(rgb2hsv(len.colM[,1],len.colM[,2],len.colM[,3]))
#set hue
hue.vec     = hsvcol[,1] * .hue.range + hue
hue.vec[hue.vec>1] = hue.vec[hue.vec>1] - 1
hsvcol[,1]  = hue.vec
#set sat
span.sat    = span(hsvcol[,2],saturation,.sat.range)
hsvcol[,2]  = contain(span.sat)
#set bri
mean.bri    = apply(len.colM,1,mean)
span.bri    = span(mean.bri,brightness,.bri.range)
hsvcol[,3]  = contain(span.bri)
colours     = hsv(hsvcol[,1],hsvcol[,2],hsvcol[,3],alpha=alpha)
}
print(.sat.range)
return(colours)
}
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=1,max.df=1)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=2,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=3,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$FCmatrix,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=1.5,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=1.5,max.df=1)
plot(ff$X[,3:4],col=colours)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=3,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=1,bri=0.7,alpha=0.50,hue=.45,.hue.range=7,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=.5,bri=0.7,alpha=0.50,hue=.45,.hue.range=7,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
colours = fcol(ff$X,3:4,sat=.7,bri=0.7,alpha=0.50,hue=.45,.hue.range=7,max.df=1)
plot(ff$X[,3:4],col=colours)
plot3d(x=ff$X[,3],y=ff$X[,4],z=apply(ff$FCmatrix[,3:4],1,sum),col=colours,size=5,alpha=0.4)
