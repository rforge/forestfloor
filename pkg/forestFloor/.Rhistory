#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(3,4)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
X = data.frame(replicate(5,runif(obs)))
y1 = with(X,sin(X1*pi*2)+5*(X2-.5)^2)+rnorm(obs)*.7-1
y2 = with(X,cos(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.7
y3 = with(X,sin(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.3
par(mfrow=c(1,1))
plot(sort(y1))
plot(sort(y1))
points(sort(y2),col=2)
points(sort(y3),col=3)
classes = c("black","red","green")
ys = data.frame(black=y1,red=y2,green=y3)
yexp=exp(ys)
Yclass = factor(apply(yexp,1,function(a.row) which(a.row==max(a.row))),labels=classes)
par(mfrow=c(1,2))
for(j in 1:2) {
for(i in 1:3) {
if(i==1) plot.mod=plot else plot.mod = points
plot.mod(density(X[as.numeric(Yclass)==i,j]),col=classes[i],type="l",ylim=c(0,2))
}
}
par(mfrow=c(1,1))
plot(X[Yclass=="red",1:2],col="red")
plot(X[Yclass=="red",1:2],col="#FF000099")
points(X[Yclass=="green",1:2],col="#00FF0099")
points(X[Yclass=="black",1:2],col="#00000099")
obs=4800
vars = 5
X = data.frame(replicate(5,runif(obs)))
y1 = with(X,sin(X1*pi*2)+5*(X2-.5)^2)+rnorm(obs)*.7-1
y2 = with(X,cos(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.7
y2 = with(X,cos(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.7
y2 = with(X,cos(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.7
y3 = with(X,sin(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*2
par(mfrow=c(1,1))
plot(sort(y1))
points(sort(y2),col=2)
points(sort(y2),col=2)
points(sort(y3),col=3)
classes = c("black","red","green")
ys = data.frame(black=y1,red=y2,green=y3)
yexp=exp(ys)
Yclass = factor(apply(yexp,1,function(a.row) which(a.row==max(a.row))),labels=classes)
par(mfrow=c(1,2))
for(j in 1:2) {
for(i in 1:3) {
if(i==1) plot.mod=plot else plot.mod = points
if(i==1) plot.mod=plot else plot.mod = points
par(mfrow=c(1,2))
for(j in 1:2) {
for(i in 1:3) {
if(i==1) plot.mod=plot else plot.mod = points
plot.mod(density(X[as.numeric(Yclass)==i,j]),col=classes[i],type="l",ylim=c(0,2))
}
}
par(mfrow=c(1,1))
plot(X[Yclass=="red",1:2],col="red")
plot(X[Yclass=="red",1:2],col="#FF000099")
points(X[Yclass=="green",1:2],col="#00FF0099")
points(X[Yclass=="black",1:2],col="#00000099")
rfo = randomForest(X,Yclass,sampsize=1000,ntree=1000)
rfo
vars = 5
X = data.frame(replicate(5,runif(obs)))
y1 = with(X,sin(X1*pi*2)+5*(X2-.5)^2)+rnorm(obs)*.3-1
y2 = with(X,cos(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*.3
y3 = with(X,sin(X1*pi*2)-5*(X2-.5)^2)+rnorm(obs)*2
par(mfrow=c(1,1))
plot(sort(y1))
plot(sort(y1))
points(sort(y2),col=2)
points(sort(y3),col=3)
classes = c("black","red","green")
ys = data.frame(black=y1,red=y2,green=y3)
yexp=exp(ys)
Yclass = factor(apply(yexp,1,function(a.row) which(a.row==max(a.row))),labels=classes)
par(mfrow=c(1,2))
for(j in 1:2) {
for(i in 1:3) {
if(i==1) plot.mod=plot else plot.mod = points
plot.mod(density(X[as.numeric(Yclass)==i,j]),col=classes[i],type="l",ylim=c(0,2))
}
}
par(mfrow=c(1,1))
plot(X[Yclass=="red",1:2],col="red")
plot(X[Yclass=="red",1:2],col="#FF000099")
points(X[Yclass=="green",1:2],col="#00FF0099")
points(X[Yclass=="black",1:2],col="#00000099")
rfo = randomForest(X,Yclass,sampsize=1000,ntree=1000)
rfo
FCs = RFCV_contribution(X,Yclass,.ntree=1000,parallel=T,fold=4,reps=3)
base.rate = (t(replicate(obs,table(Yclass)/length(Yclass))))
par(mfrow=c(3,1))
for(i in 1:3) {
print(max(apply(FCs,c(1,3),sum)[,i] / 1000 + base.rate[,i]))
hist(apply(FCs,c(1,3),sum)[,i] / 1000 + base.rate[,i],breaks=100)
#hist(pred.rate[,i])
# FCs[,,i] = FCs / apply(rf$inbag,1,sum)
}
FCsum = apply(FCs[,,],1,mean)
FCs2 = FCs / ntree / sampfrac
pars = par(no.readonly=TRUE)
par(mar=c(4,4,2,2),mfrow=c(2,2))
for(i in 1:4) {
for(j in 1:length(classes)) {
#species.indices = iris$Species==levels(iris$Species)[j]
if(j==1) paint=plot else paint=points
paint(x = X[,i],
y = FCs [,i,j]/1000+table(Yclass)[j]/length(Yclass),
col=rgb(c(0,1,0),c(0,0,1),c(0,0,0),alpha=0.6)[j],cex=0.5)
}
}
for(i in 1:4) {
for(j in 1:length(classes)) {
#species.indices = iris$Species==levels(iris$Species)[j]
if(j==1) paint=plot else paint=points
paint(x = X[,i],
y = FCs [,i,j]/1000+table(Yclass)[j]/length(Yclass),
col=rgb(c(0,1,0),c(0,0,1),c(0,0,0),alpha=0.6)[j],cex=0.5),ylim=c(0,1),
}
}
for(i in 1:4) {
for(j in 1:length(classes)) {
#species.indices = iris$Species==levels(iris$Species)[j]
if(j==1) paint=plot else paint=points
paint(x = X[,i],
y = FCs [,i,j]/1000+table(Yclass)[j]/length(Yclass),
col=rgb(c(0,1,0),c(0,0,1),c(0,0,0),alpha=0.6)[j],cex=0.5),ylim=c(0,1),
}
}
for(i in 1:4) {
for(j in 1:length(classes)) {
#species.indices = iris$Species==levels(iris$Species)[j]
if(j==1) paint=plot else paint=points
paint(x = X[,i],
y = FCs [,i,j]/1000+table(Yclass)[j]/length(Yclass),
col=rgb(c(0,1,0),c(0,0,1),c(0,0,0),alpha=0.6)[j],cex=0.5,ylim=c(0,1))
}
}
for(i in 1:4) {
for(j in 1:length(classes)) {
#species.indices = iris$Species==levels(iris$Species)[j]
if(j==1) paint=plot else paint=points
paint(x = X[,i],
y = FCs [,i,j]/1000+table(Yclass)[j]/length(Yclass),
col=rgb(c(0,1,0),c(0,0,1),c(0,0,0),alpha=0.6)[j],cex=0.5,ylim=c(0,1))
}
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,3)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,3)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,3)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=20,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
#z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
#z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
#z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
#
#    points3d(x=ff$X[,Xvars[1]],
#               y=ff$X[,Xvars[2]],
#               z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
#             ,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
points3d(x=ff$X[,Xvars[1]],
y=ff$X[,Xvars[2]],
z=apply(FCs[,Xvars,j],1,sum)+ table(Yclass)[j]/length(Yclass)
,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
points3d(x=ff$X[,Xvars[1]],
y=ff$X[,Xvars[2]],
z=apply(FCs[,Xvars,j],1,sum)/1000+ table(Yclass)[j]/length(Yclass)
,col=j,alpha=0.3,size=4)
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
if(j==3) {
points3d(x=ff$X[,Xvars[1]],
y=ff$X[,Xvars[2]],
z=apply(FCs[,Xvars,j],1,sum)/1000+ table(Yclass)[j]/length(Yclass)
,col=j,alpha=0.3,size=4)
}
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=j,alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
if(j==2) {
points3d(x=ff$X[,Xvars[1]],
y=ff$X[,Xvars[2]],
z=apply(FCs[,Xvars,j],1,sum)/1000+ table(Yclass)[j]/length(Yclass)
,col=j,alpha=0.3,size=4)
}
}
Xvars=c(1,2)
for(j in 1:3) {
ff=c()
ff$X = X
#Species.ind = iris$Species==levels(iris$Species)[j]
Xspec  = ff$X[,]
print(apply(Xspec,2,mean))
ff$FCmatrix = FCs[,,j]
class(ff) = "forestFloor"
grid = convolute_grid(ff=ff,Xvars=Xvars,zoom=1,grid=50,limit=6,
user=alist(k=500))
#FC_con = convolute_ff2(ff=ff,Xvars=Xvars,user=alist(k=50))
if(j == 1) add=FALSE else add=TRUE
persp3d(x=unique(grid[,2]),
y=unique(grid[,3]),
z=grid[,1]/1000+table(Yclass)[j]/length(Yclass),
#z=grid[,1]/1000,
col=c("grey","red","green")[j],alpha=0.3,add=add,ylim=c(0,1),
xlab=names(X)[Xvars[1]],
ylab=names(X)[Xvars[2]])
if(j==2) {
points3d(x=ff$X[,Xvars[1]],
y=ff$X[,Xvars[2]],
z=apply(FCs[,Xvars,j],1,sum)/1000+ table(Yclass)[j]/length(Yclass)
,col=j,alpha=0.3,size=4)
}
}
