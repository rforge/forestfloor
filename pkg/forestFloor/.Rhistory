points(x,knn.obj$fitted.values[[100]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=100,distance=2,type="l")
points(x,knn.obj$fitted.values[[100]],col="black",cex=0.5,type="l")
plot(x,fc)
knn.obj=train.kknn(fc~.,da=Data,kernel="gaus",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="red",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="ep",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=100,distance=2,type="l")
points(x,knn.obj$fitted.values[[100]],col="black",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=100,distance=2,type="l")
points(x,knn.obj$fitted.values[[100]],col="yellow",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[100]],col="yellow",cex=0.5,type="l")
library("kknn")
dm = as.matrix((dist(x,diag=T,upper=T,p=1)))
Data = data.frame(x=x,fc=fc)
plot(x,fc)
knn.obj=train.kknn(fc~.,da=Data,kernel="gaus",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="red",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[50]],col="red",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="ep",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="green",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[50]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="blue",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[50]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=100,distance=2,type="l")
points(x,knn.obj$fitted.values[[100]],col="yellow",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[50]],col="yellow",cex=0.5,type="l")
library("kknn")
dm = as.matrix((dist(x,diag=T,upper=T,p=1)))
Data = data.frame(x=x,fc=fc)
plot(x,fc)
knn.obj=train.kknn(fc~.,da=Data,kernel="gaus",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="red",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[25]],col="red",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="ep",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="green",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[25]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=100,distance=2)
points(x,knn.obj$fitted.values[[100]],col="blue",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[25]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=100,distance=2,type="l")
points(x,knn.obj$fitted.values[[100]],col="yellow",cex=0.5,type="l")
points(x,knn.obj$fitted.values[[25]],col="yellow",cex=0.5,type="l")
plot(x,fc)
knn.obj=train.kknn(fc~.,da=Data,kernel="gaus",kmax=25,distance=2)
points(x,knn.obj$fitted.values[[25]],col="red",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="ep",kmax=25,distance=2)
points(x,knn.obj$fitted.values[[25]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=25,distance=2)
points(x,knn.obj$fitted.values[[25]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=25,distance=2,type="l")
points(x,knn.obj$fitted.values[[25]],col="yellow",cex=0.5,type="l")
15005
1500^.5
1500^.7
1500^.3
1500^.4
1500^.45
plot(x,fc)
knn.obj=train.kknn(fc~.,da=Data,kernel="gaus",kmax=38,distance=2)
points(x,knn.obj$fitted.values[[38]],col="red",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="ep",kmax=38,distance=2)
points(x,knn.obj$fitted.values[[38]],col="green",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="triang",kmax=38,distance=2)
points(x,knn.obj$fitted.values[[38]],col="blue",cex=0.5,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=38,distance=2,type="l")
points(x,knn.obj$fitted.values[[38]],col="yellow",cex=0.5,type="l")
ff
vars=dim(ff$X)[2]
vars=dim(ff$X)[2]
if(is.null(these.vars)) these.vars = 1:vars
these.vars=NULL
vars=dim(ff$X)[2]
if(is.null(these.vars)) these.vars = 1:vars
k.fun=function(sqrt(n.vars))
k.fun=function(sqrt(n.vars))
k.fun=function() sqrt(n.vars))
k.fun=function() sqrt(n.vars)
n.vars=dim(ff$X)[2]
k=k.fun
k
k=k.fun()
k
k.fun=function() round(sqrt(n.obs))
k=k.fun()
n.obs=dim(ff$X[1])
k=k.fun()
k
n.obs=dim(ff$X[1])
n.obs
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
k
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
k.fun=function() round(sqrt(n.obs)/2)
k=k.fun()
k.fun=function() round(sqrt(n.obs)/2)) {
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
this.var=!
this.var=1
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
Data
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=38,distance=2,type="l",...)
knn.obj=train.kknn(fc~.,da=Data,kernel="re",kmax=38,distance=2,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$pred.values
knn.obj
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$fitted.values[[k]]
knn.obj
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$fitted.values[[k]]
FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$fitted.values[[k]]
}
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$fitted.values[[k]]
}
)
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),..)
{
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
knn.obj=train.kknn(fc~.,da=Data,kernel="gauss",kmax=k,distance=2,type="l")$fitted.values[[k]]
})
ff
}
fd = kknn.est(ff)
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),..)
{
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
knn.obj=train.kknn(fc~.,da=Data,...,kmax=k,distance=2,type="l")$fitted.values[[k]]
})
ff
}
fd = kknn.est(ff)
train.kknn
alist(formula=fc~.,da=Data,kmax=k,distance=2,type="l")
native.kknn.args = alist(formula=fc~.,da=Data,kmax=k,distance=2,type="l")
names(kknn.args)
native.kknn.args = alist(formula=fc~.,da=Data,kmax=k,distance=2,type="l",kernel="gaussian")
names(kknn.args)
kknn.args = alist(kernel="gaussian")
names(kknn.args)
kknn.args = alist(kernel="gaussian",distance=2)
names(kknn.args)
names(kknn.args) %in%  names(native.kknn.args)
native.kknn.args = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
names(kknn.args) %in%  names(native.kknn.args)
user.kknn = alist(kernel="gaussian",distance=2)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
args.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
args.to.overwrite
args.to.append
match(names(defaultArgs.kknn),names(kknn.args))
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
names(kknn.args)
userArgs.kknn = alist(kernel="gaussian",distance=2,da=Data)
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
native.args.to.overwrite
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
native.args.to.overwrite
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
native.args.to.overwrite
names(defaultArgs.kknn)
names(kknn.args)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian",da=4)
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
native.args.to.overwrite
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian",da=4)
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(kknn.args)
native.args.to.overwrite
names(defaultArgs.kknn)
names(kknn.args)
userArgs.kknn = alist(kernel="gaussian",distance=2,da=Data)
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,da=,kernel="gaussian"4)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,da=4,kernel="gaussian")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
native.args.to.overwrite
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
names(defaultArgs.kknn)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
native.args.to.overwrite
names(userArgs.kknn)
which(native.args.to.overwrite)
i=1
names(defaultArgs.kknn[i])
i=2
names(defaultArgs.kknn[i]
)
names(defaultArgs.kknn[i])
match(names(defaultArgs.kknn[i]),names(userArgs.kknn))
for(i in which(native.args.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
defaultArgs.kknn
userArgs.kknn = alist(kernel="gaussian",distance=2,da=7)
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(native.args.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
defaultArgs.kknn
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="rect")
native.args.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(native.args.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
defaultArgs.kknn
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
userArgs.to.append
?merge
concatenate
c(dafaultArgs.kknn,userArgs.kknn[userArgs.to.append])
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="rect")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="rect")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj=train.kknn(fc~.,da=Data,kmax=k,distance=2,type="l")$fitted.values[[k]]
c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
?call
knn.obj = call(train.kknn,kknn.args)
knn.obj = call("train.kknn",kknn.args)
knn.obj
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
defaultArgs.to.overwrite
userArgs.kknn = alist(kernel="gaussian")
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
defaultArgs.to.overwrite
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = call("train.kknn",kknn.args)
knn.obj
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = (call("train.kknn",kknn.args))
knn.obj[length(knn.obj)]
})
ff$FCfit
knn.obj = do.call("train.kknn",kknn.args)
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)
knn.obj[length(knn.obj)]
})
ff$FCfit
for(i in 1:6) cor(ff$FCfit[,i],ff$FCmatrix[,i])
ff$FCmatrix[,i]
ff$FCfit
dim(ff$FCfit)
length(ff$FCfit)
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)
knn.obj[[length(knn.obj)]]
})
dim(ff$FCfit)
knn.obj[[length(knn.obj)]]
knn.obj = do.call("train.kknn",kknn.args)
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian"),
{
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
})
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian"),
{
n.obs=dim(ff$X)[1]
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian")
{
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
})
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian")
{
n.obs=dim(ff$X)[1]
kknn.est = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian")) {
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
})
ff
}
fd = kknn.est(ff)
for(i in 1:6) cor(ff$FCmatrix[,i],ff$FCfit[,1])
for(i in 1:6) print(cor(ff$FCmatrix[,i],ff$FCfit[,1]))
obs=5000
vars = 6
X = data.frame(replicate(vars,rnorm(obs)))
Y = with(X, X1^2 + 2*sin(X2*pi) + 2 * X3 * (X4+.5))
Yerror = 1 * rnorm(obs)
var(Y)/var(Y+Yerror)
Y= Y+Yerror
#grow a forest, remeber to include inbag
rfo=randomForest::randomForest(X,Y,keep.inbag=TRUE,ntree=1000,sampsize=800)
#compute topology
ff = forestFloor(rfo,X)
library/forestFloor
library(forestFloor)
#simulate data
obs=5000
vars = 6
X = data.frame(replicate(vars,rnorm(obs)))
Y = with(X, X1^2 + 2*sin(X2*pi) + 2 * X3 * (X4+.5))
Yerror = 1 * rnorm(obs)
var(Y)/var(Y+Yerror)
Y= Y+Yerror
#grow a forest, remeber to include inbag
rfo=randomForest::randomForest(X,Y,keep.inbag=TRUE,ntree=1000,sampsize=800)
#compute topology
ff = forestFloor(rfo,X)
fd = kknn.est(ff)
for(i in 1:6) print(cor(ff$FCmatrix[,i],ff$FCfit[,i]))
dim(ff$FCfit)
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
})
ff$FCfit
dim(ff$FCfit)
for(i in 1:6) print(cor(fd$FCmatrix[,i],fd$FCfit[,i]))
plot(fd)
for(i in 1:6) print(cor(fd$FCmatrix[,i],fd$FCfit[,i])^2)
fe=fd
fe=fd
fe$FCmatrix = fe$FCfit
plot(fe)
par(mar=c(2,2,1,1),mfrow=c(2,3))
for(i in 1:6) plot(fd$FCmatrix,fd$FCfit)
for(i in 1:6) plot(fd$FCmatrix[,i],fd$FCfit[,i])
for(i in 1:6) plot(fd$FCmatrix[,i],fd$FCfit[,i],col="#00000015")
for(i in 1:6) plot(fd$X[,i],fd$FCmatrix[,i]-fd$FCfit[,i],col="#00000015")
for(i in 1:6) plot(fd$X[,i],fd$FCmatrix[,i]-fd$FCfit[,i],col="#00000015",ylim=c(-2,2))
rfo
data(prostate)
kknn.convolution = function(ff,
these.vars=NULL,
k.fun=function() round(sqrt(n.obs)/2),
userArgs.kknn = alist(kernel="gaussian")) {
n.obs=dim(ff$X)[1]
n.vars=dim(ff$X)[2]
k=k.fun()
if(is.null(these.vars)) these.vars = 1:vars
ff$FCfit = sapply(these.vars, function(this.var) {
Data = data.frame(fc=ff$FCmatrix[,this.var],x=ff$X[,this.var])
#merge userArgs and defaultArgs for kknn-function, conflicts are decided by userArgs
defaultArgs.kknn = alist(formula=fc~.,da=Data,kmax=k,kernel="gaussian")
defaultArgs.to.overwrite = names(defaultArgs.kknn) %in% names(userArgs.kknn)
for(i in which(defaultArgs.to.overwrite))  defaultArgs.kknn[i] = userArgs.kknn[match(names(defaultArgs.kknn[i]),names(userArgs.kknn))]
userArgs.to.append = !(names(kknn.args) %in% names(defaultArgs.kknn))
kknn.args = c(defaultArgs.kknn,userArgs.kknn[userArgs.to.append])
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
knn.obj[[length(knn.obj)]]
})
ff
}
slaveArgs.to.overwrite = names(slaveArgs) %in% names(masterArgs)
append.overwrite.alists= function(masterargs,slaveargs) {
slaveArgs.to.overwrite = names(slaveArgs) %in% names(masterArgs)
for(i in which(slaveArgs.to.overwrite))  slaveArgs[i] = masterArgs[match(names(slaveArgs[i]),names(masterArgs))]
masterArgs.to.append = !(names(masterArgs) %in% names(slaveArgs))
c(slaveArgs,masterArgs[masterArgs.to.append])
}
append.overwrite.alists= function(masterArgs,slaveArgs) {
slaveArgs.to.overwrite = names(slaveArgs) %in% names(masterArgs)
for(i in which(slaveArgs.to.overwrite))  slaveArgs[i] = masterArgs[match(names(slaveArgs[i]),names(masterArgs))]
masterArgs.to.append = !(names(masterArgs) %in% names(slaveArgs))
c(slaveArgs,masterArgs[masterArgs.to.append])
}
append.overwrite.alists(userArgs.kknn,defaultArgs.kknn)
userArgs.kknn = alist(kernel="gaussian",kmax=4,hat=4)
append.overwrite.alists(userArgs.kknn,defaultArgs.kknn)
kknn.args=append.overwrite.alists(userArgs.kknn,defaultArgs.kknn)
knn.obj = do.call("train.kknn",kknn.args)$fitted.values
class(alist(r="2"))
(alist(r="2"))
?alist
list?
list?
?list
arglist1 = alist(monkey="happy",telephone.no=53)
arglist2 = alist(monkey="sad",house.no=12)
append.overwrite.alists(arglist1,arglist2)
library(forestFloor)
