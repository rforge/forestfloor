range?
?rangre
?range
range(sx)
range(range(sx))
sd(range(sx))
dev(range(sx))
var(range(sx))
sx.span  = abs(sx.range[1]-sx.range[1])
sx.range = range(sx)
sx.span  = abs(sx.range[1]-sx.range[1])
sx.span
sx.span  = abs(sx.range[1]-sx.range[2])
sx.span
library(forestFloor)
box.outliers(c(1:10,70),limit=1,normalize=T)
box.outliers(c(1:10,70),limit=0.7,normalize=T)
box.outliers(c(1:10,70),limit=2.5,normalize=T)
box.outliers(c(1:10,70,-70),limit=2.5,normalize=T)
box.outliers(c(1:10,100,-100),limit=FALSE,normalize=T)
box.outliers(c(1:10,100,-100),limit=FALSE,normalize=T)
box.outliers(c(1:10,100,-100),limit=FALSE,normalize=F)
box.outliers(c(1:10,100,-100),limit=1,normalize=F)
range(ff$X)
range(ff$FCmatrix)
library(forestFloor)
plot(ff,plot_seq=4,limitTheseVars=4,order_by_importance=F)
plot(ff,plot_seq=4,limitTheseVars=1:9,order_by_importance=F)
library(forestFloor)
plot(ff,plot_seq=4,limitTheseVars=1:9,order_by_importance=F)
plot(ff,plot_seq=4,limitTheseVars=1:9,order_by_importance=F)
library(forestFloor)
plot(ff,plot_seq=4,limitTheseVars=1:9,order_by_importance=F)
plot(ff,limitTheseVars=4,order_by_importance=F)
plot(ff,limitTheseVars=4,order_by_importance=T)
plot(ff,limitTheseVars=5,order_by_importance=T)
plot(ff,limitTheseVars=7,order_by_importance=T)
plot(ff,limitTheseVars=6,order_by_importance=T)
plot(ff,limitTheseVars=1:8,order_by_importance=T)
plot(ff,limitTheseVars=1,order_by_importance=T)
plot(ff,limitTheseVars=2,order_by_importance=T)
plot(ff,limitTheseVars=3,order_by_importance=T)
names(X)
ff$imp_ind[3]
ff$imp_ind
plot(ff,limitTheseVars=3,order_by_importance=F)
plot(ff,limitTheseVars=4,order_by_importance=F)
plot(ff,order_by_importance=F)
plot(ff,order_by_importance=F)
3[1]
3[NULL]
limitTheseVars != FALSE
a=2
a %in% 1:5
a %in% 1:5 && a!=FALSE
a=FLASE
a=FALSE
a %in% 1:5 && a!=FALSE
library(forestFloor)
plot(ff,order_by_importance=F)
plot(ff,limitTheseVars=4,order_by_importance=F)
plot(ff,limitTheseVars=4,order_by_importance=T)
plot(ff,limitTheseVars=4,order_by_importance=T)
plot(ff,limitTheseVars=4,order_by_importance=F)
plot(ff,limitTheseVars=2,order_by_importance=F)
plot(ff,limitTheseVars=c(2,4),order_by_importance=F)
plot(ff,limitTheseVars=c(7,4),order_by_importance=F)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=F)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=F,limitY=F)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=F,limitY=T)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=T,limitY=T)
imp.ind
ff$imp_ind
library(forestFloor)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=F,limitY=T)
plot(ff,limitTheseVars=c(7,4,8),order_by_importance=T,limitY=T)
plot(ff,limitTheseVars=c(5),order_by_importance=T,limitY=T)
plot(ff,limitTheseVars=c(4,5),order_by_importance=T,limitY=T)
library(forestFloor)
plot(ff)
plot(ff,cropXaxes=5)
plot(ff,cropXaxes=7)
plot(ff,cropXaxes=5)
?plot3d
par3d(no.readonly=TRUE)
?par3d
fix(par3d)
par3d(useFreeType=F)
fix(par3d)
par3d(no.readonly=TRUE)
par3d(useFreeType=T)
par3d(useFreeType=F)
library(forestFloor)
plot(ff,colour_by=1)
library(forestFloor)
show3d(ff)
?open3d
rgl::open3d(params=  list(par3d(useFreeType=F)))
library(forestFloor)
show3d(ff)
rm(list=ls())
library(forestFloor)
library(randomForest)
library(ffData)
library(rfFC)
data(abalone)
names(abalone)
X=abalone[,-9]
Y=abalone[, 9]
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T)
ff = forestFloor(rfo,X)
plot(ff,colour_by=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
library(forestFloor)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
rgl::open3d()
pars=open3d()
pars
?open3d
plot(ff,cropXaxes=5)
plot(ff)
plot(ff)
rgl::getr3dDefaults()
getr3dDefaults()
getr3dDefaults()
rgl::open3d(params=  getr3dDefaults())
rgl::open3d(params=  get3dDefaults())
rgl::par3d(params=  list(par3d(useFreeType=F)))
rgl::par3d(list(par3d(useFreeType=F)))
rgl::par3d(list(par3d(useFreeType=F)))
rgl::par3d(useFreeType=F)
rgl::par3d(list(useFreeType=F))
rgl::open3d(params=list(useFreeType=F))
rgl::open3d()
rgl::open3d()
par3d()
rgl::open3d(params=list(useFreeType=F))
par3d()
?par3d
rgl::open3d(params=list(useFreeType=F))
rgl::observer3d(auto=T)
rgl::bg3d("white")
rgl::material3d(col="black")
library(forestFloor)
plot(ff)
show3d(ff)
?rgl::open3d
args(open3d)
getr3dDefaults
open3d(params=getr3dDefaults())
getr3dDefaults()
rgl:::getr3dDefaults()
params$familiy
params$family
params = rgl:::getr3dDefaults()
params$family
params$family = "bitmap"
params = rgl:::getr3dDefaults()
params$family = "bitmap"
rgl::open3d(params=params)
params = rgl:::getr3dDefaults()
rgl::open3d(params=params)
params
params$family = "bitmap"  #sans needs freetype and is not natively supported
rgl::open3d(params=params)
par3d()
params
params = rgl:::getr3dDefaults()
params$family = "bitmap"  #sans needs freetype and is not natively supported
rgl::open3d(params=params)
library(forestFloor)
show3d(ff)
show3d(ff,z_cols=1)
?plot3d
par3d()
library(forestFloor)
show3d(ff)
library(forestFloor)
show3d(ff)
library(forestFloor)
show3d(ff)
print("vklel \n rfelke")
cat("vklel \n rfelke")
cat(paste(c("vklel","rfelke",sep"\n"))
cat(paste(c("vklel","rfelke"),sep="\n"))
paste(c("vklel","rfelke"),sep="\n")
paste(c("vklel","rfelke"),sep="2")
paste(c("vklel","rfelke"),collapse="\n")
cat(paste(c("vklel","rfelke"),collapse="\n"))
names(ff)
library(forestFloor)
show3d(zcols=1)
show3d(z_cols=1)
show3d(ff,z_cols=1)
library(forestFloor)
show3d(ff,z_cols=1)
library(forestFloor)
show3d(ff,z_cols=1)
rgl.postscript()
rgl.postscript
?rgl.postscript
material3d()
library(forestFloor)
show3d(ff,z_cols=1)
library(forestFloor)
show3d(ff,z_cols=1)
rgl:::getr3dDefaults()
library(forestFloor)
show3d(ff,z_cols=1)
material3d()
library(forestFloor)
show3d(ff,z_cols=1)
?open3d
library(forestFloor)
show3d(ff,z_cols=1)
library(forestFloor)
show3d(ff,z_cols=1)
library(forestFloor)
show3d(ff,z_cols=1)
library(forestFloor)
ff$which_matrices
library(forestFloor)
show3d(ff,z_cols=1)
show3d(ff,order_by_importance=T)
names(ff)
library(forestFloor)
show3d(ff,order_by_importance=T)
library(forestFloor)
show3d(ff,order_by_importance=T)
library(forestFloor)
show3d(ff,order_by_importance=T)
install.packages("rgl")
install.packages("rgl")
library(forestFloor)
show3d(ff,order_by_importance=T)
library(forestFloor)
show3d(ff,order_by_importance=T)
library(forestFloor)
show3d(ff,order_by_importance=T)
plot3d(1,1,1)
plot3d(1,1,1,cex=4)
?material3d
library(forestFloor)
library(randomForest)
library(ffData)
library(rfFC)
data(abalone)
names(abalone)
X=abalone[,-9]
Y=abalone[, 9]
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T)
ff = forestFloor(rfo,X)
plot(ff,colour_by=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T,avoidFreeType=4)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,,avoidFreeType=4)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,,avoidFreeType=F)
rgl:::getr3dDefaults()
?rgl:::getr3dDefaults()
?open3d
rglFonts
?rglFonts
rglFonts()
par3d("useFreeType")
params = rgl:::getr3dDefaults()
params
rgl::open3d()
library(forestFloor)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,useFreeType=F)
library(forestFloor)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,useFreeType=F)
library(forestFloor)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,useFreeType=F)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,useFreeType=T)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,size=20)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=20)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=15)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=5)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=2)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=4)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=2)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=5)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=2)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,font=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="sans-serif")
rglFonts()
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="serif")
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="mono")
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="symbol")
library(forestFloor)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="symbol")
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="bitmap")
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,cex=1.22,family="bitmap",useFreeType=F)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,family="bitmap",useFreeType=F)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,useFreeType=F)
r3dDefaults(useFreeType=F)
rgl:::r3dDefaults
rgl:::r3dDefaults()
rgl:::r3dDefaults$useFreeType=F
r3dDefaults = rgl:::r3dDefaults
r3dDefaults$useFreeType = FALSE
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
r3dDefaults$useFreeType = TRU
r3dDefaults$useFreeType = TRUE
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
r3dDefaults$useFreeType = FALSE
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
rgl:::r3dDefaults()
rgl::open3d()
rgll:::getr3dDefaults()
rgl:::getr3dDefaults()
r3dDefaults$family
r3dDefaults$family="bitmap"
rgl::open3d()
r3dDefaults$family
r3dDefaults$
r3dDefaults
rgl:::getr3dDefaults()
rgl::open3d()
open3d
fix(open3d)
open3d
rgl::open3d()
open3d()
open3d(cex=1)
open3d(family="bitmap")
open3d(family="mono")
open3d(family="bitmap")
open3d(family=NULL)
open3d(family=NA)
open3d(family="bitmap")
open3d(family="sans")
open3d(useFreeType=T,family="sans")
open3d(useFreeType=F,family="bitmap")
open3d(useFreeType=F)
suppressWarnings(rgl::open3d(...))
rgl::open3d()
suppressWarnings(rgl::open3d())
suppressWarnings(rgl::open3d(...))
suppressWarnings({rgl::open3d(...)})
show3d(ff,cex=4)
rm(r3dDefaults)
show3d(ff,cex=4)
show3d(ff,cex=1.8)
show3d(ff,cex=1.8,order_by_importance=T)
show3d(ff,cex=1.8,order_by_importance=T,size=3)
show3d(ff,cex=1.8,order_by_importance=T,size=5)
show3d(ff,cex=1.8,order_by_importance=T,size=5,pch=2)
show3d(ff,cex=1.8,order_by_importance=T,size=6)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","Y"))
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","Y"),z_cols=1)
library(forestFloor)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","Y"),z_cols=1)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","X"),z_cols=3)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","X"),z_cols=5)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","8"),z_cols=5)
show3d(ff,cex=1.8,order_by_importance=T,size=6,which_matrices=c("X","X","X"),z_cols=8)
library(forestFloor)
library(forestFloor)
library(randomForest)
library(ffData)
library(rfFC)
data(abalone)
names(abalone)
X=abalone[,-9]
Y=abalone[, 9]
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T)
ff = forestFloor(rfo,X)
plot(ff,colour_by=1)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6,,avoidFreeType=F)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
plot(ff,colour_by=1,cropXaxes=T)
plot(ff,colour_by=1,cropXaxes=5)
plot(ff,colour_by=1,cropXaxes=4:5)
library(forestFloor)
plot(ff,colour_by=1,cropXaxes=4:5,crop_limit=7)
plot(ff,colour_by=1,cropXaxes=4:5,crop_limit=4)
plot(ff,colour_by=1,cropXaxes=4:5,crop_limit=3.5)
plot(ff,colour_by=1,cropXaxes=c(2,4:5),crop_limit=3.5)
plot(ff,colour_by=1,cropXaxes=c(2,4:5),crop_limit=3.8)
search()
ls()
mean
plot3d
library(forestFloor)
args(plot.forestFloor)
library(forestFloor)
library(forestFloor)
library(forestFloor)
getTree
randomForest
randomForest
library(forestFloor)
library(forestFloor)
library(forestFloor)
args(plot.forrstFloor)
args(plot.forestFloor)
help(predict.randomForest)
args(show3d)
args(recTree)
help(randomForest)
help(assign)
plot.data.frame
help(plot.data.frame)
tools::showNonASCII
tools::showNonASCII( readLines("path/filename"))
tools::showNonASCII( readLines("man/box.outliers.Rd"))
tools::showNonASCII( readLines("man/box.outliers.Rd"))
args(bos.outliers)
args(box.outliers)
fix(plot.data.frame)
help(plot.data.frame)
fix(graphics::plot.data.frame)
fix(graphics:::plot.data.frame)
(graphics:::plot.data.frame)
rfo
library(forestFloor)
library(randomForest)
library(ffData)
library(rfFC)
data(abalone)
names(abalone)
X=abalone[,-9]
Y=abalone[, 9]
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T)
plot(rfo)
help(plot.randomForest)
a=plot.randomForest
a=randomForest::plot.randomForest
a=randomForest:::plot.randomForest
fix(a)
trimTrees
library(trimTrees)
tools::showNonASCII( readLines("man/plot.forestFloor.Rd"))
tools::showNonASCII( readLines("man/show3d.Rd"))
library(forestFloor)
library(forestFloor)
randomForest
randomForest::randomForest
forestFloor::randomForest
forestFloor:::randomForest
help(rgb)
R CMD Rd2pdf forestFloor
Rd2pdf
tools::Rd2pdf
obs=3000
vars = 6
X = data.frame(replicate(vars,rnorm(obs)))
Y = with(X, X1^2 + sin(X2*pi) + 2 * X3 * X4 + 0.2 * rnorm(obs))
#grow a forest, remeber to include inbag
rfo=randomForest(X,Y,keep.inbag = TRUE)
#compute topology
ff = forestFloor2(rfo,X)
library(forstFloor)
library(forrstFloor)
library(forestFloor)
obs=3000
vars = 6
X = data.frame(replicate(vars,rnorm(obs)))
Y = with(X, X1^2 + sin(X2*pi) + 2 * X3 * X4 + 0.2 * rnorm(obs))
#grow a forest, remeber to include inbag
rfo=randomForest(X,Y,keep.inbag = TRUE)
#compute topology
ff = forestFloor(rfo,X)
#print forestFloor
print(ff)
#plot partial functions of most important variables first
plot(ff,plot_seq=NULL,colour_by="dummy, no defined color-template",col_axis=1)
#Non interacting functions are well displayed, whereas X3 and X4 are not
#by applying different colourgradient, interactions reveal themself
plot(ff,plot_seq=NULL,colour_by=3,col_axis=1)
#in 3D the interaction between X3 and X reveals itself completely
show3d(ff,x_cols=3,y_cols=4,z_cols=3:4)
show3d(ff,x_cols=3,y_cols=4,z_cols=3:4,k=15)
plot(data.frame(Y=Y,X=X))
plot(data.frame(Y=Y,X=X[,1:4]))
plot(data.frame(Y=Y,X=X[,1:4]),col="#20204030")
obs=3000
vars = 6
X = data.frame(replicate(vars,rnorm(obs)))
X
Y = with(X, X1^2 + sin(X2*pi) + 2 * X3 * X4 + 0.2 * rnorm(obs))
rfo=randomForest(X,Y,keep.inbag = TRUE)
library(forestFloor)
rfo=randomForest(X,Y,keep.inbag = TRUE)
rfo
ff = forestFloor(rfo,X)
plot(ff,plot_seq=NULL,colour_by="dummy, no defined color-template",col_axis=1)
plot(ff,plot_seq=NULL,colour_by=3,col_axis=1)
show3d(ff,x_cols=3,y_cols=4,z_cols=3:4,k=15)
plot(ff,plot_seq=NULL,colour_by=4,col_axis=2) #use plot first to define colours \cr
show3d(ff,x_cols=1,y_cols=2,z_cols=1:2)
plot(data.frame(Y=Y,X=X[,1:4]))
data(abalone)
names(abalone)
library(ffData)
library(rfFC)
data(abalone)
names(abalone)
X=abalone[,-9]
Y=abalone[, 9]
rfo=randomForest(X,Y,keep.inbag=T,ntree=500,mtry=3,sampsize=500,importance=T)
ff = forestFloor(rfo,X)
plot(ff,colour_by=1,cropXaxes=c(2,4:5),crop_limit=3.8)
show3d(ff,order_by_importance=T,size.obs=3,alpha.obs=.6)
show3d(ff,x_cols=1, y_cols=8, z_cols= c(1,8), order_by_importance=T,size.obs=3,alpha.obs=.6)
show3d(ff,x_cols=1, y_cols=8, z_cols= c(8), order_by_importance=T,size.obs=3,alpha.obs=.6)
